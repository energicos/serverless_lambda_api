AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template RDS_MySQL_With_Read_Replica:'
Parameters:
  DBName:
    Default: MyDatabase
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    Default: mytestuser
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    Default: mytestpassword
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.small
    AllowedValues: [db.t1.micro, db.m1.small, db.m1.medium, db.m1.large, db.m1.xlarge,
      db.m2.xlarge, db.m2.2xlarge, db.m2.4xlarge, db.m3.medium, db.m3.large, db.m3.xlarge,
      db.m3.2xlarge, db.m4.large, db.m4.xlarge, db.m4.2xlarge, db.m4.4xlarge, db.m4.10xlarge,
      db.r3.large, db.r3.xlarge, db.r3.2xlarge, db.r3.4xlarge, db.r3.8xlarge, db.m2.xlarge,
      db.m2.2xlarge, db.m2.4xlarge, db.cr1.8xlarge, db.t2.micro, db.t2.small, db.t2.medium,
      db.t2.large]
    ConstraintDescription: must select a valid database instance type.
  MultiAZ:
    Description: Multi-AZ master database
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    ConstraintDescription: must be true or false.
Conditions:
  Is-EC2-VPC: !Or [!Equals [!Ref 'AWS::Region', eu-central-1], !Equals [!Ref 'AWS::Region',
      cn-north-1]]
  Is-EC2-Classic: !Not [{Condition: Is-EC2-VPC}]
Resources:
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: '0.0.0.0/0'

  MasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref 'DBName'
      AllocatedStorage: !Ref 'DBAllocatedStorage'
      DBInstanceClass: !Ref 'DBInstanceClass'
      Engine: MySQL
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      MultiAZ: !Ref 'MultiAZ'
      Tags:
      - Key: Name
        Value: Master Database
      VPCSecurityGroups: 
      - !GetAtt [DBSecurityGroup, GroupId]
    DeletionPolicy: Snapshot

  # Lambda Function to create table in RDS
  CustomResource:
    Type: Custom::CustomResource
    DependsOn: MasterDB
    Properties:
      ServiceToken: !GetAtt 'CustomFunction.Arn'
      DBHost: !GetAtt [MasterDB, Endpoint.Address]
      DBName: !Ref 'DBName'
      DBUser: !Ref 'DBUser'
      DBPassword: !Ref 'DBPassword'
  CustomFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: 'tests3-s3bucket-t9ne2v3mb47y'
        S3Key: 'create-table-rds.zip'
      Handler: create-table-rds.handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.6
      Timeout: '30'
      VpcConfig:
        SecurityGroupIds:
        - !GetAtt [DBSecurityGroup, GroupId]
        SubnetIds:
        - 'subnet-2db18067'
        - 'subnet-56db6f2d'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'rds:*'
                  - 'ec2:*'
                  - 'logs:*'
                Resource: '*'
Outputs:
  MasterJDBCConnectionString:
    Description: JDBC connection string for the master database
    Value: !Join ['', ['jdbc:mysql://', !GetAtt [MasterDB, Endpoint.Address], ':',
        !GetAtt [MasterDB, Endpoint.Port], /, !Ref 'DBName']]
